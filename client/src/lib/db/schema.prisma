generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite" //"mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid()) @map("_id")
  name          String?
  email         String?         @unique
  password      String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String @id @default(cuid()) @map("_id")
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String
  access_token      String
  expires_at        Int
  token_type        String
  scope             String
  id_token          String
  session_state     String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid()) @map("_id")
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(cuid()) @map("_id")
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, credentialID])
}

model students_violations_type {
  id         String   @id @default(cuid()) @map("_id")
  student    students @relation(fields: [studentId], references: [id])
  studentId  String   @map("_studentId")
  scenario   String
  violations String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model students {
  id           String                     @id @default(cuid()) @map("_id")
  student_name String
  email        String                     @unique
  phone        String
  createdAt    DateTime                   @default(now())
  updatedAt    DateTime                   @updatedAt
  violations   students_violations_type[]
  timePenalty  Int                        @default(200)
}
